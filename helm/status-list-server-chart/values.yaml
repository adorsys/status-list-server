global:
  storageClass: "high-performance"

statuslist:
  initContainers:
  - name: wait-for-postgres
    image: busybox
    command:
    - "sh"
    - "-c"
    - |
      echo "Waiting for PostgreSQL..."
      until nc -z statuslist-postgresql.statuslist.svc.cluster.local 5432; do
        echo "PostgreSQL not ready. Retrying in 2s...";
        sleep 2;
      done
      echo "PostgreSQL is up."

  - name: wait-for-redis
    image: busybox
    command:
    - "sh"
    - "-c"
    - |
      echo "Waiting for Redis..."
      until nc -z statuslist-redis-master.statuslist.svc.cluster.local 6379; do
        echo "Redis not ready. Retrying in 2s...";
        sleep 2;
      done
      echo "Redis is up."
  replicaCount: 1
  image:
    repository: forkimakwichek/sl # TODO: For testing, change to forkimakwichek/sl:v1.0.4 to avoid s3, cert and redis tls error
    pullPolicy: Always
    tag: "v1.0.4"
  service:
    type: ClusterIP
    port: 8081
    targetPort: 8000
  ingress:
    enabled: true
    path: /
    pathType: Prefix
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    tls:
      hosts:
      - "*.eudi-adorsys.com"
      secretName: statuslist-tls
    externalDnsHostname: statuslist.eudi-adorsys.com
  env:
    RUST_LOG: "debug" # TODO: Change to info for final release
    POSTGRES_USER: "postgres"
    APP_ENV: "production"
    APP_SERVER__HOST: "0.0.0.0"
    APP_SERVER__PORT: "8000"
    APP_SERVER__CERT__EMAIL: "info@adorsys.com"
    APP_SERVER__CERT__ORGANIZATION: "adorsys GmbH & CO KG"
    APP_SERVER__CERT__ACME_DIRECTORY_URL: "https://acme-v02.api.letsencrypt.org/directory"
    APP_SERVER__CERT__EKU: "1,3,6,1,5,5,7,3,30"
    APP_REDIS__REQUIRE_TLS: "true"
    APP_REDIS__ROOT_CERT_PATH: "/etc/redis-certs/ca.crt"
    APP_CACHE__TTL: "300"
    APP_CACHE__MAX_CAPACITY: "1000"
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

postgresql:
  auth:
    username: "postgres"
    database: "status-list"
    existingSecret: "statuslist-secret"
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: postgres-password
  primary:
    persistence:
      enabled: true
      size: 10Gi
  service:
    type: ClusterIP
    ports:
      postgresql: 5432

externalSecret:
  metadata:
    name: statuslist-external-secret
  spec:
    refreshInterval: 30m
    secretStoreRef:
      name: statuslist-secret-store
      kind: SecretStore
    target:
      name: statuslist-secret
      creationPolicy: Owner
    data:
    - secretKey: postgres-password
      remoteRef:
        key: statuslist-secret
        property: POSTGRES_PASSWORD
    - secretKey: redis-password
      remoteRef:
        key: statuslist-secret
        property: REDIS_PASSWORD
secretStore:
  aws:
    region: eu-central-1

redis:
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 8.0.3-debian-12-r2
    pullPolicy: IfNotPresent
    debug: true

  auth:
    enabled: true
    existingSecret: "statuslist-secret"
    existingSecretPasswordKey: "redis-password"

  master:
    persistence:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 12Gi
    service:
      type: ClusterIP
      ports:
        redis: 6379

  replica:
    replicaCount: 1
    persistence:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 12Gi
  tls:
    enabled: true
    authClients: false
    autoGenerated: true
