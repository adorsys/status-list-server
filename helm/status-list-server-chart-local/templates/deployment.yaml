apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "status-list-server-local.fullname" . }}
  labels:
    {{- include "status-list-server-local.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.statuslist.replicaCount }}
  selector:
    matchLabels:
      {{- include "status-list-server-local.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "status-list-server-local.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
      - name: wait-for-postgres
        image: busybox
        command:
        - "sh"
        - "-c"
        - |
          echo "Waiting for PostgreSQL..."
          until nc -z {{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local 5432; do
            echo "PostgreSQL not ready. Retrying in 2s...";
            sleep 2;
          done
          echo "PostgreSQL is up."
      
      - name: wait-for-redis
        image: busybox
        command:
        - "sh"
        - "-c"
        - |
          echo "Waiting for Redis..."
          until nc -z {{ .Release.Name }}-redis-master.{{ .Release.Namespace }}.svc.cluster.local 6379; do
            echo "Redis not ready. Retrying in 2s...";
            sleep 2;
          done
          echo "Redis is up."
      
      containers:
      - name: status-list-server
        image: "{{ .Values.statuslist.image.repository }}:{{ .Values.statuslist.image.tag }}"
        imagePullPolicy: {{ .Values.statuslist.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.statuslist.service.targetPort }}
          protocol: TCP
        env:
        {{- range $key, $value := .Values.statuslist.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        - name: POSTGRES_PASSWORD
          value: "postgres"  # Password from secret
        - name: REDIS_PASSWORD
          value: ""  # Empty password for local testing
        resources:
          {{- toYaml .Values.statuslist.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5